checkpoint.dir = /tmp/spark-metrics-monitor/

properties.source.type = ch.cern.PropertiesSourceTest

metrics.source.type = kafka
metrics.source.consumer.bootstrap.servers = habench101.cern.ch:9092,habench102.cern.ch:9092,habench103.cern.ch:9092
metrics.source.consumer.group.id = spark_metric_analyzer
metrics.source.topics = db-logging-platform
metrics.source.parser.attributes = INSTANCE_NAME METRIC_NAME
metrics.source.parser.value.attribute = VALUE
metrics.source.parser.timestamp.attribute = END_TIME

metrics.define.DBCPUUsagePercentage.value = DBCPUUsagePerSec / HostCPUUsagePerSec
metrics.define.DBCPUUsagePercentage.metric.groupby = INSTANCE_NAME
metrics.define.DBCPUUsagePercentage.metric.DBCPUUsagePerSec.filter.attribute.METRIC_NAME = CPU Usage Per Sec
metrics.define.DBCPUUsagePercentage.metric.HostCPUUsagePerSec.filter.attribute.METRIC_NAME = Host CPU Usage Per Sec

metrics.define.CPUUsagePercentage.value = HostCPUUsagePerSec / 1000
metrics.define.CPUUsagePercentage.metric.groupby = ALL
metrics.define.CPUUsagePercentage.metric.HostCPUUsagePerSec.filter.attribute.METRIC_NAME = Host CPU Usage Per Sec

results.sink.type = elastic
results.sink.index = itdb_db-metric-results-{analyzed_metric.timestamp:YYYY-MM-dd}/log
notifications.sink.type = elastic
notifications.sink.index = itdb_db-metric-notifications-{timestamp:YYYY-MM-dd}/log
spark.es.net.ssl=true
spark.es.nodes.wan.only=true
spark.es.nodes=es-itdb.cern.ch
spark.es.port=9203
spark.es.net.http.auth.user=<user>
spark.es.net.http.auth.pass=<password>

monitor.DBCPUUsagePercentage.filter.attribute.$defined_metric = DBCPUUsagePercentage
monitor.DBCPUUsagePercentage.pre-analysis.type = weighted-average
monitor.DBCPUUsagePercentage.pre-analysis.period = 10m
monitor.DBCPUUsagePercentage.analysis.type = fixed-threshold
monitor.DBCPUUsagePercentage.analysis.error.upperbound = 20
monitor.DBCPUUsagePercentage.analysis.warn.upperbound  = 10
monitor.DBCPUUsagePercentage.analysis.error.lowerbound = -1

monitor.CPUUsagePercentage.filter.attribute.$defined_metric = CPUUsagePercentage
monitor.CPUUsagePercentage.pre-analysis.type = weighted-average
monitor.CPUUsagePercentage.pre-analysis.period = 10m
monitor.CPUUsagePercentage.analysis.type = fixed-threshold
monitor.CPUUsagePercentage.analysis.error.upperbound = 20
monitor.CPUUsagePercentage.analysis.warn.upperbound  = 10
monitor.CPUUsagePercentage.analysis.error.lowerbound = -1

monitor.DEVDB12U-ExecutionsPerSec.filter.attribute.INSTANCE_NAME = DEVDB12U2
monitor.DEVDB12U-ExecutionsPerSec.filter.attribute.METRIC_NAME = Executions Per Sec
monitor.DEVDB12U-ExecutionsPerSec.pre-analysis.type = weighted-average
monitor.DEVDB12U-ExecutionsPerSec.pre-analysis.period = 3m
monitor.DEVDB12U-ExecutionsPerSec.analysis.type = seasonal
monitor.DEVDB12U-ExecutionsPerSec.analysis.season = hour

monitor.ACCINT1-PhysicalReadsPerSec.filter.attribute.INSTANCE_NAME = ACCINT1
monitor.ACCINT1-PhysicalReadsPerSec.filter.attribute.METRIC_NAME = Physical Reads Per Sec
monitor.ACCINT1-PhysicalReadsPerSec.pre-analysis.type = weighted-average
monitor.ACCINT1-PhysicalReadsPerSec.pre-analysis.period = 3m
monitor.ACCINT1-PhysicalReadsPerSec.analysis.type = seasonal
monitor.ACCINT1-PhysicalReadsPerSec.analysis.season = hour
monitor.ACCINT1-PhysicalReadsPerSec.analysis.learning.ratio = 0.5

monitor.ACCINT2-DBBlockGetsPerSec.filter.attribute.INSTANCE_NAME = ACCINT2
monitor.ACCINT2-DBBlockGetsPerSec.filter.attribute.METRIC_NAME = DB Block Gets Per Sec
monitor.ACCINT2-DBBlockGetsPerSec.pre-analysis.type = weighted-average
monitor.ACCINT2-DBBlockGetsPerSec.pre-analysis.period = 3m
monitor.ACCINT2-DBBlockGetsPerSec.analysis.type = seasonal
monitor.ACCINT2-DBBlockGetsPerSec.analysis.season = hour





