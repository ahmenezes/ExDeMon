checkpoint.dir = /tmp/spark-metrics-monitor/
spark.batch.time = 30s

metrics.source.kafka-prod.type = kafka
metrics.source.kafka-prod.consumer.bootstrap.servers = habench101.cern.ch:9092,habench102.cern.ch:9092,habench103.cern.ch:9092
metrics.source.kafka-prod.consumer.group.id = spark_metric_analyzer_test
metrics.source.kafka-prod.topics = db-logging-platform
metrics.source.kafka-prod.parser.attributes = DB_NAME INSTANCE_NAME METRIC_NAME
metrics.source.kafka-prod.parser.value.attributes = VALUE
metrics.source.kafka-prod.parser.timestamp.attribute = END_TIME

#metrics.source.kafka-dev.type = kafka
#metrics.source.kafka-dev.consumer.bootstrap.servers = habench101.cern.ch:9092,habench102.cern.ch:9092,habench103.cern.ch:9092
#metrics.source.kafka-dev.consumer.group.id = spark_metric_analyzer
#metrics.source.kafka-dev.topics = db-logging-platform
#metrics.source.kafka-dev.parser.attributes = INSTANCE_NAME METRIC_NAME
#metrics.source.kafka-dev.parser.value.attribute = VALUE
#metrics.source.kafka-dev.parser.timestamp.attribute = END_TIME

results.sink.type = elastic
results.sink.index = itdb_db-metric-results-{analyzed_metric.timestamp:YYYY-MM-dd}/log
actuators.type = elastic
actuators.index = itdb_db-metric-notifications-{timestamp:YYYY-MM-dd}/log
spark.es.net.ssl=true
spark.es.nodes.wan.only=true
spark.es.nodes=es-itdb.cern.ch
spark.es.port=9203
spark.es.net.http.auth.user=<user>
spark.es.net.http.auth.pass=<password>

metrics.define.diff-prod-dev.metrics.groupby = DB_NAME, METRIC_NAME
metrics.define.diff-prod-dev.variables.value.filter.attribute.METRIC_NAME = Executions Per Sec
metrics.define.diff-prod-dev.variables.value.aggregate = count
metrics.define.diff-prod-dev.variables.value.expire = 5m
metrics.define.diff-prod-dev.variables.value.when = batch

#metrics.define.DBCPUUsagePercentage.value = DBCPUUsagePerSec / HostCPUUsagePerSec
#metrics.define.DBCPUUsagePercentage.metrics.groupby = INSTANCE_NAME
#metrics.define.DBCPUUsagePercentage.variables.DBCPUUsagePerSec.filter.attribute.METRIC_NAME = CPU Usage Per Sec
#metrics.define.DBCPUUsagePercentage.variables.HostCPUUsagePerSec.filter.attribute.METRIC_NAME = Host CPU Usage Per Sec
#
#metrics.define.CPUUsagePercentage.value = HostCPUUsagePerSec / 1000
#metrics.define.CPUUsagePercentage.metric.groupby = ALL
#metrics.define.CPUUsagePercentage.variables.HostCPUUsagePerSec.filter.attribute.METRIC_NAME = Host CPU Usage Per Sec
#
#metrics.define.nodesUpPerCluster.value = nodesRunning
#metrics.define.nodesUpPerCluster.metric.groupby = CLUSTER_NAME
#metrics.define.nodesUpPerCluster.variables.nodesRunning.filter.attribute.METRIC_NAME = Process Is Running
#metrics.define.nodesUpPerCluster.variables.nodesRunning.aggregate = sum

monitor.diff-prod-dev.filter.attribute.$defined_metric = diff-prod-dev
monitor.diff-prod-dev.analysis.type = fixed-threshold

monitor.DBCPUUsagePercentage.filter.attribute.$defined_metric = DBCPUUsagePercentage
monitor.DBCPUUsagePercentage.pre-analysis.type = weighted-average
monitor.DBCPUUsagePercentage.pre-analysis.period = 10m
monitor.DBCPUUsagePercentage.analysis.type = fixed-threshold
monitor.DBCPUUsagePercentage.analysis.error.upperbound = 20
monitor.DBCPUUsagePercentage.analysis.warn.upperbound  = 10
monitor.DBCPUUsagePercentage.analysis.error.lowerbound = -1

monitor.CPUUsagePercentage.filter.attribute.$defined_metric = CPUUsagePercentage
monitor.CPUUsagePercentage.pre-analysis.type = weighted-average
monitor.CPUUsagePercentage.pre-analysis.period = 10m
monitor.CPUUsagePercentage.analysis.type = fixed-threshold
monitor.CPUUsagePercentage.analysis.error.upperbound = 20
monitor.CPUUsagePercentage.analysis.warn.upperbound  = 10
monitor.CPUUsagePercentage.analysis.error.lowerbound = -1

monitor.DEVDB12U-ExecutionsPerSec.filter.attribute.INSTANCE_NAME = DEVDB12U2
monitor.DEVDB12U-ExecutionsPerSec.filter.attribute.METRIC_NAME = Executions Per Sec
monitor.DEVDB12U-ExecutionsPerSec.pre-analysis.type = weighted-average
monitor.DEVDB12U-ExecutionsPerSec.pre-analysis.period = 3m
monitor.DEVDB12U-ExecutionsPerSec.analysis.type = seasonal
monitor.DEVDB12U-ExecutionsPerSec.analysis.season = hour

monitor.ACCINT1-PhysicalReadsPerSec.filter.attribute.INSTANCE_NAME = ACCINT1
monitor.ACCINT1-PhysicalReadsPerSec.filter.attribute.METRIC_NAME = Physical Reads Per Sec
monitor.ACCINT1-PhysicalReadsPerSec.pre-analysis.type = weighted-average
monitor.ACCINT1-PhysicalReadsPerSec.pre-analysis.period = 3m
monitor.ACCINT1-PhysicalReadsPerSec.analysis.type = seasonal
monitor.ACCINT1-PhysicalReadsPerSec.analysis.season = hour
monitor.ACCINT1-PhysicalReadsPerSec.analysis.learning.ratio = 0.5

monitor.ACCINT2-DBBlockGetsPerSec.filter.attribute.INSTANCE_NAME = ACCINT2
monitor.ACCINT2-DBBlockGetsPerSec.filter.attribute.METRIC_NAME = DB Block Gets Per Sec
monitor.ACCINT2-DBBlockGetsPerSec.pre-analysis.type = weighted-average
monitor.ACCINT2-DBBlockGetsPerSec.pre-analysis.period = 3m
monitor.ACCINT2-DBBlockGetsPerSec.analysis.type = seasonal
monitor.ACCINT2-DBBlockGetsPerSec.analysis.season = hour





